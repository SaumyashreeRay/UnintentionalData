{"version":3,"sources":["App.js","serviceWorker.js","firebase.js","components/Create.js","components/Join.js","components/Game.js","components/Home.js","components/vote.js","components/Win.js","components/Lobby.js","index.js","logo.svg"],"names":["Component","Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Create","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hostUserName","numberOfPlayers","numberofRounds","mode","dbKey","showStart","showSubmit","updateUserName","bind","assertThisInitialized","updateNumberOfPlayers","updateNumberOfRounds","updateMode","handleSubmit","continueSetup","event","setState","value","target","k","submissions","players","nickname","submissionID","promptID","Math","floor","random","type","voting","winner","alert","i","database","ref","update","_this2","push","currentRoundNumber","imagesUsed","numberPlayers","numberRounds","powerups","score","round","then","snap","key","console","log","start","numberOfRounds","react_default","a","createElement","react_router_dom","to","Button_default","id","onChange","min","max","default","name","class","onClick","Join","gameCode","updateGameCode","userName","gc","user","maxPlayers","once","snapshot","val","numChildren","child","Game","clicks","appendCaption","randomIndex","getRandomInt","appendImage","caption","document","getElementById","innerHTML","index","currentCardNumber","url","pic","setAttribute","elem","appendChild","addEventListener","getAttribute","imageNumber","style","border","borderColor","l","length","ceil","readDB","className","Home","Voting","getRoundCaption","orderByKey","forEach","parseInt","getSubmittedImages","Winning","winningPic","getWinningImage","getScore","Lobby","concat","routing","react_router","exact","path","component","ReactDOM","render","components_Lobby","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.3b15368d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport firebase from 'firebase'\n  // Initialize Firebase\n  var config = {\n    apiKey: \"AIzaSyBG0Qkj858Axm39hTx_AXEshQUJGQHi6HE\",\n    authDomain: \"unintentional-data-labeling.firebaseapp.com\",\n    databaseURL: \"https://unintentional-data-labeling.firebaseio.com\",\n    projectId: \"unintentional-data-labeling\",\n    storageBucket: \"unintentional-data-labeling.appspot.com\",\n    messagingSenderId: \"750426975197\"\n  };\n  firebase.initializeApp(config);\n  export default firebase;","import React, { Component } from 'react';\nimport firebase from '../firebase'\nimport { storage } from 'firebase';\nimport Button from 'react-bootstrap/Button'\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\n\n\nclass Create extends Component {\n    \n    constructor(props)\n    {\n        super(props);\n        \n        this.state = {\n          hostUserName:'',\n          numberOfPlayers: '',\n          numberofRounds:'',\n          mode:'image',\n          dbKey: '',\n          showStart:false,\n          showSubmit:true,\n        }\n\n        this.updateUserName = this.updateUserName.bind(this);\n        this.updateNumberOfPlayers = this.updateNumberOfPlayers.bind(this);\n        this.updateNumberOfRounds = this.updateNumberOfRounds.bind(this);\n        this.updateMode = this.updateMode.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.continueSetup = this.continueSetup.bind(this);\n    }\n\n    updateMode(event) {\n        this.setState({value: event.target.value});\n    }\n\n    updateUserName(event)\n    {\n        this.setState({hostUserName: event.target.value})\n    }\n\n    updateNumberOfPlayers(event)\n    {\n        this.setState({numberOfPlayers : event.target.value})\n    }\n    updateNumberOfRounds(event)\n    {\n        this.setState({numberofRounds : event.target.value})\n    }  \n    \n    continueSetup(k){\n        var prompt = Math.floor(Math.random() * (833 - 1 + 1)) + 1;\n        var submissions = {\n              players : [ null, {\n                nickname : \"\",\n                submissionID : 1\n              },],\n              promptID : prompt,\n              type : \"\",\n              voting : [null, {\n                nickname : 0\n              },],\n              winner : \"\"\n            }\n        \n        alert(k)\n        for (var i = 1; i < this.state.numberofRounds; i++){\n            firebase.database().ref('game-session/' + k + '/round/' + (i+1)).update({submissions})\n        }\n    }\n    \n    handleSubmit()\n    {\n        var oneRound = {\n            submissions : {\n              players : [ null, {\n                nickname : \"\",\n                submissionID : 1\n              },],\n              promptID : 1,\n              type : \"\",\n              voting : [null, {\n                nickname : 0\n              },],\n              winner : \"\"\n            }\n        };\n        \n\n        if (this.state.mode!=null && this.state.numberOfPlayers!=null && \n            this.state.numberofRounds!=null && this.state.hostUserName!='' && \n            this.state.numberOfPlayers>=3 && this.state.numberofRounds>=3){\n                firebase.database().ref('game-session/').push({\n                    currentRoundNumber : 1,\n                    imagesUsed : null,\n                    mode : this.state.mode,\n                    numberPlayers : this.state.numberOfPlayers,\n                    numberRounds : this.state.numberofRounds,\n                    players : \n                    [ null, {\n                        nickname : this.state.hostUserName,\n                        powerups : 0,\n                        score : 0\n                        },\n                    ],\n                    round : [ null, oneRound ],\n                }).then((snap) => {\n                    const key = snap.key;\n                    console.log(key);\n                    this.setState({dbKey: key});\n                    this.setState({showStart: true});\n                    this.setState({showSubmit: false});\n                    this.continueSetup(key);\n                 }); \n                 this.start = true;\n                //  this.continueSetup();\n            }\n        \n        if (this.state.numberOfPlayers<3){\n            alert(\"Not enough players\")\n        }\n        if (this.state.numberOfRounds<3){\n            alert(\"Not enough rounds\")\n        } \n        if (this.state.hostUserName==''){\n            alert(\"Enter a valid nickname\")\n        }\n    }\n\n    render() { \n        return   (\n            <div>\n                <div>\n                <Link to=\"/\">\n                    <Button id=\"exit\">Home</Button>\n                </Link>   \n                </div>\n            <header>Create a New Game </header>\n            <div id=\"gameOptions\">\n                <form>\n                    <p>Enter Your Nickname </p>\n                    <input type=\"text\" onChange={this.updateUserName}></input>\n\n                    <p>Number of Players (3-8)                     \n                        <br></br><input type=\"number\" min=\"3\" max=\"8\" default=\"3\" name=\"players\" onChange={this.updateNumberOfPlayers}></input>\n                    </p>\n\n                    <p>Number of Rounds (min 3)\n                        <br></br><input type=\"number\" min=\"3\" max=\"50\" default=\"3\" name=\"rounds\" onChange={this.updateNumberOfRounds}></input>\n                    </p>\n\n                    <p>Play with \n                        <div class='styled-select white semi-square '>\n                            <select name=\"prompt\">\n                                <option value=\"image\">Image</option>\n                                {/* <option value=\"caption\">Caption</option> */}\n                            </select>\n                        </div>\n                    </p>\n                    \n                </form>\n                {this.state.showSubmit ?\n                    <Button type=\"submit\" onClick={this.handleSubmit} >Submit</Button> : null\n                }\n                {this.state.showStart ?\n                        <Link to=\"/game\"><Button >Start</Button></Link> :null\n                }\n                <p> Your Shareable GameCode: {this.state.dbKey}</p>\n            </div>\n        </div>\n        );\n    }\n}\nexport default Create;","import React, { Component } from 'react';\nimport firebase from '../firebase'\nimport Button from 'react-bootstrap/Button'\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\n\n\nclass Join extends Component {\n    \n    constructor(props)\n    {\n        super(props);\n\n        this.state = {\n            hostUserName:'',\n            gameCode: '',\n            showStart: false,\n            showSubmit: true,\n        }\n\n        this.updateUserName = this.updateUserName.bind(this);\n        this.updateGameCode = this.updateGameCode.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    updateGameCode(event) {\n        this.setState({gameCode: event.target.value});\n    }\n\n    updateUserName(event)\n    {\n        this.setState({userName: event.target.value})\n    }\n\n    handleSubmit()\n    {   \n        var gc = this.state.gameCode;\n        var user = this.state.hostUserName;\n        var maxPlayers = 0;\n        var current = 0;\n        firebase.database().ref('game-session/' + gc + '/numberPlayers').once('value', function(snapshot) {\n            maxPlayers = snapshot.val()\n        });\n        if (gc!=null && user!=null){\n            firebase.database().ref('game-session/' + gc + '/players').once('value', function(snapshot) {\n                if (snapshot.numChildren()<maxPlayers){ \n                   firebase.database().ref('game-session/' + gc + '/players').child(snapshot.numChildren()+1).update({\n                       nickname : user,\n                       powerups : 0,\n                       score : 0\n                       }).then(() => {\n                        alert(\"You have been added to this game.\"); \n                     });\n               } else {\n                   alert(\"You cannot join this game\")\n                    \n               }  \n           })\n            firebase.database().ref('game-session/' + gc + '/players').once('value', function(snapshot) {\n            }).then((snapshot)=>{\n                current = snapshot.numChildren();\n                if (current!=0){\n                    this.setState({showStart: true});  \n                    this.setState({showSubmit:false});\n                }\n            });\n           \n        }\n    }\n\n    render() { \n        return   (\n            <div>\n                <div>\n                <Link to=\"/\">\n                    <Button id=\"exit\">Home</Button>\n                </Link>   \n                </div>\n                <header>Join A Game</header>\n                <div id=\"gameOptions\">\n                    <form>\n                        <p>Enter Your Nickname </p>\n                            <input type=\"text\" onChange={this.updateUserName}></input>\n                        <p>Enter Game Code<br></br>\n                            <input type=\"text\" name=\"gameCode\" onChange={this.updateGameCode}></input>\n                        </p>\n                        {this.state.showSubmit ?\n                            <Button onClick={this.handleSubmit}>Submit</Button>:null\n                        }\n                    </form>\n                    {this.state.showStart ?\n                        <Link to=\"/game\"><Button >Start</Button></Link> :null\n                    }\n                </div>\n        </div>\n        );\n    }\n}\nexport default Join;","import React, { Component } from 'react';\nimport '../App.css';\nimport firebase from '../firebase'\nimport { storage } from 'firebase';\nimport Button from 'react-bootstrap/Button';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\n\nclass Game extends Component{\n\n\n\n    readDB(){\n        var clicks = [0, 0, 0, 0];\n        this.appendCaption()\n        for(var i = 0; i < 4; i++){\n            var randomIndex = this.getRandomInt(0,833);\n            this.appendImage(randomIndex, i, clicks);\n        };\n        \n        \n    }\n    appendCaption(){\n        var randomIndex = this.getRandomInt(1,27);\n        return firebase.database().ref('captions/'+randomIndex).once('value').then(function(snapshot){\n            console.log(snapshot);\n            console.log(snapshot.val());\n            console.log(snapshot.val().caption);\n            window.caption = snapshot.val().caption\n            document.getElementById('caption').innerHTML = snapshot.val().caption\n            //when not hardcoding we will have to replace \"oneGame\" with the sessionID\n            //also will have to keep trak of the round number so it is not 1 each time\n            firebase.database().ref('game-session/oneGame/round/1/submissions/').update({\n                promptID: randomIndex,\n                });\n            \n        })\n    }\n    \n    \n      appendImage(index, currentCardNumber, clicks)\n    {\n        // var pictureURL;\n        \n        return firebase.database().ref('images/' + index).once('value').then(function(snapshot) {\n          //pictureURL = (snapshot.val().url);\n          console.log(snapshot.val().url)\n          window.url = snapshot.val().url\n          var pic = document.createElement(\"img\");\n          pic.setAttribute(\"class\", \"randomPictures\");\n          pic.setAttribute(\"src\", snapshot.val().url);\n          pic.setAttribute('id', \"img\"+currentCardNumber)\n          pic.setAttribute('alt', index);\n          \n          var elem = document.createElement(\"div\")\n          elem.setAttribute('height', '200px')\n          elem.setAttribute('width', '200px')\n          elem.setAttribute(\"class\", \"grid-item\");\n          elem.setAttribute('id', currentCardNumber)\n          elem.appendChild(pic);\n          document.getElementById(\"grid\").appendChild(elem)\n          elem.addEventListener('click', function(){\n            console.log(document.getElementById('img'+currentCardNumber).getAttribute('alt'));\n            let imageNumber = document.getElementById('img'+currentCardNumber).getAttribute('alt')\n            if (clicks[currentCardNumber] === 0){\n                console.log(clicks[currentCardNumber])\n                //this makes it so that if you click a picture it submits it and over writes if you click another picture\n                //so when you click submit all it does is go to the voting page and the submit button does not really \n                //push anything to the database in a submission way\n                //the voting page will grab the images from the database \n                //currently this is hard coded so we have to make the \"oneGame\" and actual dynamic sessionID\n                //and make the username and the child dynamic as well\n                firebase.database().ref('game-session/oneGame/round/1/submissions/players/').child(1).update({\n                    nickname: \"Alex\",\n                    submissionID: {imageNumber},\n                    });\n                this.style.border = \"solid\";\n                this.style.borderColor = \"#17C490\";\n                for(var l=0; l<clicks.length; l++){\n                    if(clicks[l]===1){\n                         document.getElementById(l).style.border = 'none';\n                         clicks[l]--;\n                    }\n                }\n                clicks[currentCardNumber]++;\n\n            }\n            else if (clicks[currentCardNumber]=== 1){\n                \n                \n                console.log(clicks[currentCardNumber])\n                this.style.border = 'none';\n                clicks[currentCardNumber]--;\n            }\n            \n        })     \n       });\n\n    }  \n\n    getRandomInt(min, max) \n    {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    \n    componentDidMount(){\n        window.addEventListener('load', this.readDB());\n        }\n    \n\n    \n    render() {\n        return (\n            <div>\n                <div>\n                <Link to=\"/\">\n                    <Button id=\"exit\">Exit Game</Button>\n                </Link>   \n                </div>\n                <header>\n                    Round 1 \n                </header>\n                <div className=\"gameInfo\"><h2>Your Score: 0</h2></div>\n                <div className=\"container\">\n\n                    <div className=\"caption\" id=\"caption\">\n                    </div>\n\n                    <div className=\"grid\" id=\"grid\">\n                       </div> \n                    <Link to=\"/vote\">\n                    <Button id=\"Submit\">Submit</Button>\n                </Link>  \n            </div>\n            </div>\n        );\n      }\n    }\nexport default Game;\n","import React, { Component } from 'react';\nimport firebase from '../firebase'\nimport { storage } from 'firebase';\nimport Button from 'react-bootstrap/Button'\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\n\n\n\n\nclass Home extends Component {\n    render() { \n        return   (\n            <div>\n            <header>Memes For Machines </header>\n                <div id=\"a\">\n                    <div id=\"description\">Who will find the best caption/picture combo?</div>\n                    <div id=\"menuOptions\">\n                        <Link to=\"/create\">\n                            <Button>New Game</Button>\n                        </Link>            \n                        <Link to=\"/join\">\n                            <Button>Join Game</Button>\n                        </Link>\n                        <Link to=\"/Game\">\n                            <Button>Sample Round</Button>\n                        </Link>         \n                    </div>\n                </div>\n            </div>\n\n\n        );\n    }\n}\nexport default Home;","import React, { Component } from 'react';\nimport '../App.css';\nimport firebase from '../firebase'\nimport { storage } from 'firebase';\nimport Button from 'react-bootstrap/Button';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\n\nclass Voting extends Component{\n\n\n\n    getSubmittedImages(){\n\n        var clicks = [0, 0, 0, 0];\n        this.getRoundCaption()\n        var currentCardNumber = 0;\n        var query = firebase.database().ref(\"game-session/oneGame/round/1/submissions/players\").orderByKey();\n        query.once(\"value\").then(function (snapshot) {\n            snapshot.forEach(child => {\n            console.log(child.val().submissionID.imageNumber);\n            const index = parseInt(child.val().submissionID.imageNumber);\n                \n            firebase.database().ref('images/' + index).once('value').then(function(snapshot) {\n                window.url = snapshot.val().url\n                var pic = document.createElement(\"img\");\n                pic.setAttribute(\"class\", \"randomPictures\");\n                pic.setAttribute(\"src\", snapshot.val().url);\n                pic.setAttribute('id', \"img\"+currentCardNumber)\n                pic.setAttribute('alt', index);\n                \n                var elem = document.createElement(\"div\")\n                elem.setAttribute('height', '200px')\n                elem.setAttribute('width', '200px')\n                elem.setAttribute(\"class\", \"grid-item\");\n                elem.setAttribute('id', currentCardNumber)\n                elem.appendChild(pic);\n                document.getElementById(\"grid\").appendChild(elem)\n                //we really need to rethink how we do this in the database\n                //we need to store what each person votes for and then choose the pic with the most votes\n                //right now we are only hardcoding what the image that we are voting for is and setting that as the winner\n                elem.addEventListener('click', function(){\n                    console.log(document.getElementById('img'+currentCardNumber).getAttribute('alt'));\n                    let imageNumber = document.getElementById('img'+currentCardNumber).getAttribute('alt')\n                    if (clicks[currentCardNumber] === 0){\n                        console.log(clicks[currentCardNumber])\n                        \n                        firebase.database().ref('game-session/oneGame/round/1/submissions/').update({\n                            winner: index,\n                            });\n                        this.style.border = \"solid\";\n                        this.style.borderColor = \"#17C490\";\n                        for(var l=0; l<clicks.length; l++){\n                            if(clicks[l]===1){\n                                 document.getElementById(l).style.border = 'none';\n                                 clicks[l]--;\n                            }\n                        }\n                        clicks[currentCardNumber]++;\n        \n                    }\n                    else if (clicks[currentCardNumber]=== 1){\n                        \n                        \n                        console.log(clicks[currentCardNumber])\n                        this.style.border = 'none';\n                        clicks[currentCardNumber]--;\n                    }\n                    \n                })\n            //     elem.addEventListener('click', function(){\n            //       console.log(\"wtf\" + document.getElementById('img'+currentCardNumber).getAttribute('alt'));\n            //       if (clicks[currentCardNumber] === 0){\n            //           this.style.border = \"solid\";\n            //           this.style.borderColor = \"#17C490\";\n            //           for(var l=0; l<clicks.length; l++){\n            //               if(clicks[l]===1){\n            //                   document.getElementById(l).style.border = 'none';\n            //                   clicks[l]--;\n            //               }\n            //           }\n            //           clicks[currentCardNumber]++;\n      \n            //       }\n            //       else if (clicks[currentCardNumber]=== 1){\n            //           console.log(clicks[currentCardNumber])\n            //           this.style.border = 'none';\n            //           clicks[currentCardNumber]--;\n            //       }\n                  \n            //   })\n             });\n      \n            });\n            currentCardNumber++;\n        });\n            \n        \n    }\n    getRoundCaption(){\n\n        firebase.database().ref('game-session/oneGame/round/1/submissions/promptID').once('value').then(function(snapshot){\n            console.log(snapshot.val());\n            var index = snapshot.val();\n            firebase.database().ref('captions/'+index).once('value').then(function(snapshot){\n                console.log(snapshot);\n                console.log(snapshot.val());\n                console.log(snapshot.val().caption);\n                window.caption = snapshot.val().caption\n                document.getElementById('caption').innerHTML = snapshot.val().caption\n                \n        });\n      \n        })\n    }\n    \n\n\n    getRandomInt(min, max) \n    {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    \n    componentDidMount(){\n        window.addEventListener('load', this.getSubmittedImages());\n        }\n    \n\n    \n    render() {\n        return (\n            <div>\n                <div>\n                <Link to=\"/\">\n                    <Button id=\"exit\">Exit Game</Button>\n                </Link>   \n                </div>\n                <header>\n                    Round 1 Voting\n                </header>\n                <div className=\"gameInfo\"><h2>Your Score: 0</h2></div>\n                <div className=\"container\">\n\n                    <div className=\"caption\" id=\"caption\">\n                    </div>\n\n                    <div className=\"grid\" id=\"grid\">\n                       </div> \n                    <Link to=\"/win\">\n                    <Button id=\"Submit\">Submit</Button>\n                </Link>  \n            </div>\n            </div>\n        );\n      }\n    }\nexport default Voting;\n","import React, { Component } from 'react';\nimport firebase from '../firebase'\nimport { storage } from 'firebase';\nimport Button from 'react-bootstrap/Button'\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\n\n\n\n\nclass Winning extends Component {\n\n    getWinningImage(){\n\n        this.getRoundCaption()\n        firebase.database().ref('game-session/oneGame/round/1/submissions/winner').once('value').then(function(snapshot){\n            console.log(snapshot)\n            console.log(parseInt(snapshot.val()))\n            var winningPic = parseInt(snapshot.val())\n            console.log(winningPic)\n            firebase.database().ref('images/' + winningPic).once('value').then(function(snapshot) {\n                console.log(snapshot.val().url)\n                window.url = snapshot.val().url\n                var pic = document.createElement(\"img\");\n                pic.setAttribute(\"class\", \"winnerPicture\");\n                pic.setAttribute(\"src\", snapshot.val().url)\n                pic.setAttribute('alt', winningPic);\n                \n                var elem = document.createElement(\"div\")\n                elem.setAttribute('height', '200px')\n                elem.setAttribute('width', '200px')\n                elem.setAttribute(\"class\", \"grid-item\");\n                elem.appendChild(pic);\n                document.getElementById(\"winner\").appendChild(elem)\n\n            });               \n         });\n         \n    }\n\n\n    getRoundCaption(){\n\n        firebase.database().ref('game-session/oneGame/round/1/submissions/promptID').once('value').then(function(snapshot){\n            console.log(snapshot.val());\n            var index = snapshot.val();\n            firebase.database().ref('captions/'+index).once('value').then(function(snapshot){\n                console.log(snapshot);\n                console.log(snapshot.val());\n                console.log(snapshot.val().caption);\n                window.caption = snapshot.val().caption\n                document.getElementById('caption').innerHTML = snapshot.val().caption\n                \n        });\n      \n        })\n    }\n\n    getScore(){\n        \n        firebase.database().ref('game-session/oneGame/players/1/score').once('value').then(function(snapshot){\n            console.log(snapshot.val());\n            \n            document.getElementById('winScore').innerHTML = \"Your Score: \" + snapshot.val()\n            \n         });\n    }\n\n    componentDidMount(){\n        window.addEventListener('load', this.getWinningImage());\n        }\n\n    render() { \n        return   (\n            <div>\n                <div>\n                <Link to=\"/\">\n                    <Button id=\"exit\">Exit Game</Button>\n                </Link>   \n                </div>\n                <header>\n                    Round 1 Winner\n                </header>\n                <div className=\"gameInfo\"><h2 id = \"winScore\">{this.getScore()}</h2></div>\n                <div className=\"container\">\n\n                    <div className=\"caption\" id=\"caption\">\n                    </div>\n\n                    <div className=\"grid\" id=\"winner\">\n                       </div>  \n            </div>\n            </div>\n        );\n            \n\n\n    }\n}\nexport default Winning;","import React, {\n  Component\n} from 'react';\nimport firebase from '../firebase'\n\nclass Lobby extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      players: [],\n      dbKey: \"\"\n    };\n  }\n\n  getPlayers() {\n    var query = firebase.database().ref(\"game-session/oneGame/players\").orderByKey();\n    query.once(\"value\")\n      .then(function (snapshot) {\n        snapshot.forEach(child => {\n          //console.log(child.val().nickname);\n          this.setState({\n            players: this.state.players.concat(['test'])\n          });\n        });\n      });\n  }\n  \n  componentDidMount() {\n    //this.getPlayers();\n  }\n\n  render() {\n\n    return (\n      <div>\n      <ul>\n        {/* {this.props.hostUserName}\n        Your Username: ___________\n        {\n          this.state.players.map((player)=>\n          {\n            return (\n              <tr key = {player}>\n                <td> {player}</td>\n              </tr>\n             \n            )\n           \n          })\n        } */}\n      </ul>\n\n      <div id = \"main\">\n\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default Lobby;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Button from 'react-bootstrap/Button'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Create from './components/Create';\nimport Join from './components/Join';\nimport Game from './components/Game';\nimport Home from './components/Home';\nimport Voting from './components/vote';\nimport Winning from './components/Win';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport Lobby from './components/Lobby'\n\nconst routing = (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/create\" component={Create} />\n        <Route path=\"/join\" component={Join} />\n        <Route path=\"/game\" component={Game} />\n        <Route path=\"/vote\" component={Voting} />\n        <Route path=\"/win\" component={Winning} />\n      </div>\n    </Router>\n  )\n  ReactDOM.render(<Lobby/>, document.getElementById('root'))\n  ReactDOM.render(routing, document.getElementById('main'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}